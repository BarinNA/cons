#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьНастрокамиЗагрузки();
	
	Элементы.СтраницаСопоставленияАналитики.Видимость  = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗагрузкиФлагПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЗагрузки.ТекущиеДанные;

	РекурсивноОбработатьФлагиДерева(ТекущиеДанные.ПолучитьЭлементы(), ТекущиеДанные.Флаг);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтатусЗагрузкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	МассивОтветов = Новый Массив;
	ТаблицаСопоставления.Очистить();
	
	Если Поле = Элементы.ДеревоСтатусЗагрузкиЗагрузить Тогда
		ТекущиеДанные = Элементы.ДеревоСтатусЗагрузки.ТекущиеДанные;
		Организация = ТекущиеДанные.ПолучитьРодителя().ЭлементДерева;
	
		НачатьЗагрузкуДанных(ТекущиеДанные.Период, ТекущиеДанные.ЭлементДерева, Организация, ТекущиеДанные.База, МассивОтветов);
			
	КонецЕсли;
	
	АдресОтвета = ПоместитьВоВременноеХранилище(МассивОтветов, УникальныйИдентификатор);
	
	Если ТаблицаСопоставления.Количество() <> 0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСопоставленияАналитики;
		Элементы.СтраницаСопоставленияАналитики.Видимость  = Истина;
	Иначе
		Элементы.СтраницаСопоставленияАналитики.Видимость  = Ложь;
		ОбработатьСопоставлениеНаСервере();	
	КонецЕсли;	
	
КонецПроцедуры
	
#КонецОбласти

#Область Команды

&НаКлиенте
Процедура ЗаполнитьНастройкиЗагрузки(Команда)
	ЗаполнитьНастрокамиЗагрузки();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформциюИзИсточника(Команда)
	
	ПолучитьИнформациюИзИсточникаНаСервере();
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбработкаЗагрузки;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСопоставление(Команда)
	
	ОбработатьСопоставлениеНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьНастрокамиЗагрузки()
	
	ДеревоЗагрузки.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Базы.Ссылка КАК База,
		|	БазыОрганизации.Организация КАК Организация,
		|	ВидыОтчетов.Ссылка КАК ВидОтчета
		|ИЗ
		|	Справочник.Базы КАК Базы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Базы.Организации КАК БазыОрганизации
		|			ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ВидыОтчетов КАК ВидыОтчетов
		|			ПО ИСТИНА
		|		ПО Базы.Ссылка = БазыОрганизации.Ссылка
		|ИТОГИ
		|ПО
		|	База,
		|	Организация";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаБаза = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЭлементыБазы = ДеревоЗагрузки.ПолучитьЭлементы();
	
	Пока ВыборкаБаза.Следующий() Цикл
		
		База = ЭлементыБазы.Добавить();
		База.ЭлементДерева = ВыборкаБаза.База;
		База.Картинка = 0;
	
		ЭлементыОрг = База.ПолучитьЭлементы();
		ВыборкаОрганизация = ВыборкаБаза.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОрганизация.Следующий() Цикл
			// Вставить обработку выборки ВыборкаОрганизация
	
			Организация = ЭлементыОрг.Добавить();
			Организация.ЭлементДерева = ВыборкаОрганизация.Организация;
			Организация.Картинка = 1;
			
			ЭлементыОтчеты = Организация.ПолучитьЭлементы();
			ВыборкаОтчет = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
			Пока ВыборкаОтчет.Следующий() Цикл
				
				Отчет = ЭлементыОтчеты.Добавить();
				Отчет.ЭлементДерева = ВыборкаОтчет.ВидОтчета;
				Отчет.Картинка = 2;

			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РекурсивноОбработатьФлагиДерева(Коллекция, Флаг) 

	Для каждого Элемент Из Коллекция Цикл
	
		РекурсивноОбработатьФлагиДерева(Элемент.ПолучитьЭлементы(), Флаг);
		Элемент.Флаг = Флаг;
	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИнформациюИзИсточникаНаСервере()
	
	ТаблицаНастроекЗапроса = ПодготовитьТаблицуНастроекЗапроса();
	
	ТЗ_Инф = ЗагрузкаДанных.ПолучитьИнформациюПоОтчетамИзИсточника(ТаблицаНастроекЗапроса);
			
	ПреобразоватьТЗвДеревоСтатусЗагрузки(ТЗ_Инф);

КонецПроцедуры 

&НаСервере
Процедура ПреобразоватьТЗвДеревоСтатусЗагрузки(Знач ТЗ_Инф)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТЗ.База,
		|	ТЗ.Орг,
		|	ТЗ.Отчет,
		|	ТЗ.ДатаНачала,
		|	ТЗ.ДатаОкончания,
		|	ТЗ.ДатаЗагрузки
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.База КАК База,
		|	ВТ.Орг КАК Орг,
		|	ВТ.Отчет КАК Отчет,
		|	ВТ.ДатаНачала,
		|	ВТ.ДатаОкончания,
		|	ВТ.ДатаЗагрузки
		|ИЗ
		|	ВТ КАК ВТ
		|УПОРЯДОЧИТЬ ПО
		|	База,
		|	Орг,
		|	Отчет
		|ИТОГИ
		|ПО
		|	Орг";
	
	Запрос.УстановитьПараметр("ТЗ", ТЗ_Инф);
	РезультатЗапроса = Запрос.Выполнить();
	
	ДеревоСтатусЗагрузки.ПолучитьЭлементы().Очистить();
	ВыборкаОрг = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЭлементыДерева = ДеревоСтатусЗагрузки.ПолучитьЭлементы();
	
	Пока ВыборкаОрг.Следующий() Цикл
		
		Орг = ЭлементыДерева.Добавить();
		Орг.ЭлементДерева = ВыборкаОрг.Орг;
		Орг.Картинка = 1;
		ЭлементыОрг = Орг.ПолучитьЭлементы();
		
		Выборка = ВыборкаОрг.Выбрать();
	
		Пока Выборка.Следующий() Цикл
						
			Отч = ЭлементыОрг.Добавить();
			Отч.ЭлементДерева 	= Выборка.Отчет;
			Отч.База 			= Выборка.База;
			Отч.Период			= Новый СтандартныйПериод(Выборка.ДатаНачала, Выборка.ДатаОкончания);
			Отч.ДатаПоследнейЗагрузки = Выборка.ДатаЗагрузки;
			Отч.Загрузить = "Загрузить";
			Отч.Картинка = 2;
			
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПодготовитьТаблицуНастроекЗапроса()
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Base", 	Новый ОписаниеТипов("СправочникСсылка.Базы"));
	ТЗ.Колонки.Добавить("Org", 		Новый ОписаниеТипов("СправочникСсылка.Аналитика"));
	ТЗ.Колонки.Добавить("RepType", 	Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОтчетов"));
		
	Для Каждого База Из ДеревоЗагрузки.ПолучитьЭлементы() Цикл
		
		Для Каждого Организация Из База.ПолучитьЭлементы() Цикл
		
			Для Каждого Отчет Из Организация.ПолучитьЭлементы() Цикл
				
				Если Отчет.Флаг Тогда
					СтрТЗ = ТЗ.Добавить();
					СтрТЗ.Base    = База.ЭлементДерева;
					СтрТЗ.Org     = Организация.ЭлементДерева;
					СтрТЗ.RepType = Отчет.ЭлементДерева;
				КонецЕсли;
						
			КонецЦикла;	
		
		КонецЦикла;	
		
	КонецЦикла;	
	
	Возврат ТЗ;
	
КонецФункции

// Процедура инициалирует запрос к источникам
// 
// Параметры:
// 	Период      - период запроса
// 	ВидОтчета   - ВидОтчета
// 	Организация - Организация
// 	База        - База
// 	МассивОтветов - Массив в котором будут аккумулироваться все ответы
&НаСервере
Процедура НачатьЗагрузкуДанных(Период, ВидОтчета, Организация, База, МассивОтветов)
	
	КонтекстОбъекта = РеквизитФормыВЗначение("Объект");
	
	ПараметрыЗагрузки = КонтекстОбъекта.ПолучитьСтруктуруНастроекЗагрузки();
	ПараметрыЗагрузки.Период 	  = Период;
	ПараметрыЗагрузки.Организация = Организация;
	ПараметрыЗагрузки.База 		  = База;
	ПараметрыЗагрузки.ВидОтчета   = ВидОтчета;
	
	//Получим данные по отчетам - на выходе получим структуру ответа, для последующего анализа на сопоставление аналитики
	СтруктураОтвета = КонтекстОбъекта.ЗагрузитьДанныеОтчета(ПараметрыЗагрузки);
	
	ЗаполнитьТаблицуСопоставления(СтруктураОтвета, База);
	
	СтруктураОтвета.Вставить("База", База);
	
	МассивОтветов.Добавить(СтруктураОтвета);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСопоставления(СтруктураОтвета, База)
	
	Для Каждого СтрОрг из СтруктураОтвета.orglist Цикл
		
		Для Каждого СтрОтчета Из СтрОрг.repsdata Цикл
			
			Для Каждого стрИнф из СтрОтчета.repdata Цикл
				
				Если стрИнф.analytics.type = "Строка" ИЛИ стрИнф.analytics.type = "Неопределено" Тогда
					Продолжить;
				КонецЕсли;	
				
				ПоискАналитики = РаботаСАналитикой.ПолучитьЗначениеАналитикиПоИД(База, стрИнф.analytics.type,  стрИнф.analytics.id);	
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Наименование",стрИнф.analytics.Name);
				СтруктураОтбора.Вставить("Тип", стрИнф.analytics.type);
				СтруктураОтбора.Вставить("База", База);
				СтруктураОтбора.Вставить("ИД", стрИнф.analytics.id);
							
				ПоискВТаблицеСопоставления = ТаблицаСопоставления.НайтиСтроки(СтруктураОтбора);
				
				Если ПоискАналитики.Пустая() И ПоискВТаблицеСопоставления.Количество() = 0 Тогда
					
					СтрСопоставления = ТаблицаСопоставления.Добавить();
					ЗаполнитьЗначенияСвойств(СтрСопоставления, СтруктураОтбора);
					
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСопоставлениеНаСервере()
	
	МассивОтветов = ПолучитьИзВременногоХранилища(АдресОтвета);
	
	Для Каждого Стр Из ТаблицаСопоставления Цикл
		
		СтруктураАналитики = РаботаСАналитикой.ПолучитьСтруктуруНовойАналитики();
		СтруктураАналитики.База = Стр.База;
		СтруктураАналитики.Наименование = Стр.Наименование;
		СтруктураАналитики.Тип = Стр.Тип;
		СтруктураАналитики.ИдИсточник = Стр.ИД;
			
		Если Стр.Сопоставление.Пустая() Тогда			
			РаботаСАналитикой.СоздатьАналитику(СтруктураАналитики);			
		Иначе		
			СтруктураАналитики.Объект = Стр.Сопоставление;
			РаботаСАналитикой.СоздатьЗаписьСоответствияАналитики(СтруктураАналитики);	
		КонецЕсли;		
		
	КонецЦикла;	
	
	//Запустим обработку данных
	Для Каждого СтрДанных Из МассивОтветов Цикл
		ЗагрузкаДанных.ОбработатьПолученныеДанныеОтчетов(СтрДанных);	
	КонецЦикла;	
	
КонецПроцедуры


#КонецОбласти
