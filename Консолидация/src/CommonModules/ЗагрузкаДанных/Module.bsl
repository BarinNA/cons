
Процедура ОбработатьПолученныеДанныеОтчетов(СтруктураСДанными) Экспорт
	
	База = СтруктураСДанными.База;
	
	Для Каждого СтрОрг из СтруктураСДанными.OrgList Цикл
		
		Организация = РаботаСАналитикой.ПолучитьЗначениеАналитикиПоИД(База, СтрОрг.org.type, СтрОрг.org.id);
		
		Для Каждого СтрОтчета из СтрОрг.repsdata Цикл
						
			ЗагрузитьДанныеОтчета(СтрОтчета, Организация, База);
			
		КонецЦикла;	
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОтчета(СтрОтчета, Организация, База) Экспорт
	
	Если СтрОтчета.reptype = "PL" Тогда
		ЗагрузитьДанныеPL(СтрОтчета.repdata, Организация, База);
	ИначеЕсли СтрОтчета.reptype = "BS" Тогда
				
	ИначеЕсли СтрОтчета.reptype = "CF" Тогда
					
	КонецЕсли;				
	
КонецПроцедуры

#Область ЗагрузкаДанныхPL 

// Функция разбирает данные отчета, и формирует документ загрузки данных
// 
// Параметры:
// 	ДанныеОтчета - Структура 
//		* ТипОтчета - Строка
//		* Организация - Структура - Аналитика
//				- Наименование - Строка
//				- Тип - Строка - ТипОбъекта
//				- UID
//		* База - Строка
//		* Период - Дата
//		* Данные - Массив - Элементом массива является структура
//			
// Возвращаемое значение:
// 	Истина/Ложь
Функция ЗагрузитьДанныеPL(ДанныеОтчета, Организация, База) Экспорт

	//Проверим дату запрета
	//Если НЕ РаботаСДатойЗапрета.ПроверитьДатуЗапрета(ДанныеОтчета.Период) Тогда
	//Возврат ПолучитьСтруктуруОтчетаОЗагрузке(Ложь, "Данный период закрыт для загрузки");
	//КонецЕсли;

	ТаблицаДанных = ИнициализироватьТаблицуДанныхПоPL();
	РазобратьСтруктуруДанныхПоPL(ТаблицаДанных, ДанныеОтчета, База, Организация);
		
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТЗ.Организация,
		|	ТЗ.Статья,
		|	ТЗ.Аналитика,
		|	ТЗ.Период,
		|	ТЗ.Сумма,
		|	ТЗ.Остаток
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Организация,
		|	ВТ.Статья,
		|	ВТ.Аналитика,
		|	ВТ.Период КАК Период,
		|	СУММА(ВТ.Сумма) КАК Сумма,
		|	ВТ.Остаток
		|ИЗ
		|	ВТ КАК ВТ
		|СГРУППИРОВАТЬ ПО
		|	ВТ.Остаток,
		|	ВТ.Организация,
		|	ВТ.Статья,
		|	ВТ.Аналитика,
		|	ВТ.Период
		|УПОРЯДОЧИТЬ ПО
		|	Период
		|ИТОГИ
		|ПО
		|	Период";
	
	Запрос.УстановитьПараметр("ТЗ", ТаблицаДанных);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПериод = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПериод.Следующий() Цикл
		
		Документ = ПроверитьНаличиеДокументаСДаннымиЗаПериод(База, Организация, 
						ВыборкаПериод.Период, Перечисления.ВидыОтчетов.PL);


		ВыборкаДетальныеЗаписи = ВыборкаПериод.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
			стрДок = Документ.ДанныеОтчета.Добавить();
			ЗаполнитьЗначенияСвойств(стрДок, ВыборкаДетальныеЗаписи);	

		КонецЦикла;
		
		Попытка
			Документ.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Документ.Записать();
			ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;		
		
	КонецЦикла;
									
	Возврат ПолучитьСтруктуруОтчетаОЗагрузке();

КонецФункции

Функция ПроверитьНаличиеДокументаСДаннымиЗаПериод(База, Организация, Период, ВидОтчета)
	
	Если ВидОтчета = Перечисления.ВидыОтчетов.PL Тогда
		ДокументОтчета = "ЗагрузкаДанныхPL";	
	КонецЕсли;	 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗагрузкаДанных.Ссылка
		|ИЗ
		|	Документ." + ДокументОтчета + " КАК ЗагрузкаДанных
		|ГДЕ
		|	ЗагрузкаДанных.Организация = &Организация
		|	И ЗагрузкаДанных.База = &База
		|	И ЗагрузкаДанных.Проведен
		|	И ЗагрузкаДанных.Период = &Период";
	
	Запрос.УстановитьПараметр("База", 		 База);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", 	 Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Документ = Документы[ДокументОтчета].СоздатьДокумент();
		Документ.База = База;
		Документ.Организация = Организация;
		Документ.Период = Период;
		Документ.Дата = ТекущаяДата();
		
		Возврат Документ;
		
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Внимание! В ходе загрузки данны по отчету " + Строка(ВидОтчета) + " с параметрами:
		|Период: " + Формат(Период,"ДФ='ММММ yyyy';") + " 
		|Организация: " + Строка(Организация) + "
		|База: " + Строка(База) + "
		|Было обнаружено более одного проведенного документа! (Так быть не должно)";
		Сообщение.Сообщить(); 
	КонецЕсли;
			
	Выборка.Следующий();
	
	Документ = Выборка.Ссылка.ПолучитьОбъект();
	Документ.ДанныеОтчета.Очистить();
	
	Возврат Документ;		
	
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИфункции

Функция ПолучитьСтруктуруОтчетаОЗагрузке(Результат = Истина, Сообщение = "")		
	Возврат Новый Структура("Результат, Сообщение", Результат, Сообщение);		
КонецФункции		

Функция ПолучитьСтандартныйПериод(СтрПериода)
	
	Период = Новый СтандартныйПериод;
	Период.ДатаНачала 	 = СтрПериода.StartDate;
	Период.ДатаОкончания = СтрПериода.EndDate;
	
	Возврат Период;
	
КонецФункции

#КонецОбласти

#Область РазборАналитики

Процедура РазобратьСтруктуруДанныхПоPL(ТаблицаДанных, ДанныеОтчета, База, Организация)
		
	Для Каждого стрИнф из ДанныеОтчета Цикл

		стрТЗ = ТаблицаДанных.Добавить();
		стрТЗ.Период 		= стрИнф.Period;
		стрТЗ.Статья 		= Справочники.СтатьиPL.НайтиПоКоду(стрИнф.pl_item);						
		стрТЗ.Аналитика 	= РазобратьЗначениеАналитики(База, стрИнф.analytics);
		стрТЗ.Организация 	= Организация;
		стрТЗ.Сумма  		= стрИнф.Sum;
		стрТЗ.Остаток 		= стрИнф.BalanceMark;
		 
	КонецЦикла;	
			
КонецПроцедуры	

Функция РазобратьЗначениеАналитики(База, Аналитика) Экспорт
	
	Если Аналитика.type = "Строка" Тогда
		Возврат Аналитика.name;
	ИначеЕсли Аналитика.type = "Неопределено" Тогда
		Возврат Неопределено;
	Иначе
		Возврат РаботаСАналитикой.ПолучитьЗначениеАналитикиПоИД(База, Аналитика.type, Аналитика.id);
	КонецЕсли;					
	
КонецФункции

#КонецОбласти

#Область Информация_о_состоянии_отчетности

Функция ПолучитьИнформациюПоОтчетамИзИсточника(ТЗНастроек) Экспорт
	
	СтруктураЗапроса = СформироватьСтруктуруЗапросаСостояния(ТЗНастроек);
	ТЗ_Инф = ИнициализироватьТаблицуИнформацииПоОтчетам();
	
	Для Каждого Элемент Из СтруктураЗапроса.Bases Цикл
	
		СтрокаПодключения = Элемент.Base.СтрокаПодключения;
		Пользователь 	  = Элемент.Base.Пользователь;
		Пароль 			  = Элемент.Base.Пароль;
		
		СоедиенениеHTTP = РаботаСHTTPСервисами.ПолучитьСоединение(Пользователь, Пароль);
		ЗапросHTTP = РаботаСHTTPСервисами.ПолучитьЗапрос(СтрокаПодключения + "/GetRepsInfo");
		
		ТекстЗапроса = РаботаСJSON.ПреобразоватьЗначениеВJSON(Новый Структура("OrgList", Элемент.OrgList));
		
		ЗапросHTTP.Заголовки.Вставить("Content-type", "application/x-www-form-urlencoded;charset=utf-8");
		ЗапросHTTP.УстановитьТелоИзСтроки(ТекстЗапроса);
		
		Ответ = СоедиенениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
		
		РаботаСHTTPСервисами.ПроверитьКодСостояния(Ответ.КодСостояния);
		
		СтруктураОтвета = РаботаСJSON.ПреобразоватьJSONВЗначение(Ответ.ПолучитьТелоКакСтроку(), "StartDate,EndDate,LastUploadPeriod");
		
		Для Каждого Стр ИЗ СтруктураОтвета.OrgList Цикл
			СтрТЗ_Инф = ТЗ_Инф.Добавить();
			СтрТЗ_Инф.База 		 	= Элемент.Base;
			СтрТЗ_Инф.Орг  		 	= РаботаСАналитикой.ПолучитьЗначениеАналитикиПоИД(Элемент.Base, "Организации", Стр.org_id);
			СтрТЗ_Инф.Отчет 	 	= Перечисления.ВидыОтчетов[Стр.RepType];
			СтрТЗ_Инф.ДатаНачала 	= Стр.Period.StartDate;
			СтрТЗ_Инф.ДатаОкончания = Стр.Period.EndDate;
			СтрТЗ_Инф.ДатаЗагрузки 	= Стр.LastUploadPeriod;	
		КонецЦикла;	
		
	КонецЦикла;	
	
	Возврат ТЗ_Инф;
	
КонецФункции	

Функция СформироватьСтруктуруЗапросаСостояния(Знач ТЗНастроек)
		
	СтруктураЗапроса = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТЗ.Base,
		|	ТЗ.Org,
		|	ТЗ.RepType
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Base КАК Base,
		|	ВТ.Org КАК Org,
		|	ВТ.RepType КАК RepType
		|ИЗ
		|	ВТ КАК ВТ
		|ИТОГИ
		|ПО
		|	Base,
		|	Org,
		|	RepType";
	
	Запрос.УстановитьПараметр("ТЗ", ТЗНастроек);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаBase = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СтруктураЗапроса.Вставить("Bases", Новый Массив);
	
	Пока ВыборкаBase.Следующий() Цикл
			
		Base = Новый Структура("Base,OrgList", ВыборкаBase.Base, Новый Массив);
		ВыборкаOrg = ВыборкаBase.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаOrg.Следующий() Цикл
						
			Org = Новый Структура("Org_id,RepTypes", РаботаСАналитикой.ПолучитьИдАналитики(ВыборкаBase.Base, ВыборкаOrg.Org), Новый Массив);
			ВыборкаRepType = ВыборкаOrg.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаRepType.Следующий() Цикл
				Org.RepTypes.Добавить(Строка(ВыборкаRepType.RepType));					
			КонецЦикла;
			
			Base.OrgList.Добавить(Org);
			
		КонецЦикла;
		
		СтруктураЗапроса.Bases.Добавить(Base);
		
	КонецЦикла;
	
	Возврат СтруктураЗапроса;
	
КонецФункции

Функция ИнициализироватьТаблицуИнформацииПоОтчетам()
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("База", 		Новый ОписаниеТипов("СправочникСсылка.Базы"));
	ТЗ.Колонки.Добавить("Орг",  		Новый ОписаниеТипов("СправочникСсылка.Аналитика"));
	ТЗ.Колонки.Добавить("Отчет", 		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОтчетов"));
	ТЗ.Колонки.Добавить("ДатаНачала", 	Новый ОписаниеТипов("Дата"));
	ТЗ.Колонки.Добавить("ДатаОкончания",Новый ОписаниеТипов("Дата"));
	ТЗ.Колонки.Добавить("ДатаЗагрузки", Новый ОписаниеТипов("Дата"));
	
	Возврат ТЗ;
	
КонецФункции

Функция ИнициализироватьТаблицуДанныхПоPL()
	
	ТЗ = Новый ТаблицаЗначений;
	
	МассивТиповАналитика = Новый Массив;
	МассивТиповАналитика.Добавить(Тип("Строка"));
	МассивТиповАналитика.Добавить(Тип("СправочникСсылка.Аналитика"));
	
	ТипАналитика = Новый ОписаниеТипов(МассивТиповАналитика,,,,Новый КвалификаторыСтроки(150));
	
	ТЗ.Колонки.Добавить("Организация", 	Новый ОписаниеТипов("СправочникСсылка.Аналитика"));
	ТЗ.Колонки.Добавить("Аналитика",  	ТипАналитика);
	ТЗ.Колонки.Добавить("Статья",  		Новый ОписаниеТипов("СправочникСсылка.СтатьиPL"));
	ТЗ.Колонки.Добавить("Период", 	    Новый ОписаниеТипов("Дата"));
	ТЗ.Колонки.Добавить("Сумма",  		Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Остаток",  	Новый ОписаниеТипов("Булево"));
	
	Возврат ТЗ;
		
КонецФункции

#КонецОбласти





